Урок 22:
NavLink to в Dialogs - делает ссылки для компоненты Route
Важно импортировать компоненту NavLink из 'react-router-dom'
exact внутри Route позволяет сделать переход по ссылке только если адрес точный

Урок 23:
Разбиваем на компоненты Dialogs
Делаем красивее верстку в Profile
props name, props id добавляем

Урок 24:
Добавлен массив данных в Dialogs и интегрирован в эту компаненту через props

Урок 25. Метод map()
Есть массив данных:
let dialogsData = [
        { id: 6, name: 'Alberth' },
        { id: 7, name: 'Victoria' },
        { id: 8, name: 'Romualda' },
        { id: 9, name: 'Germiona' },
        { id: 10, name: 'Antoniy' },
    ]

    let messagesData = [
        { id: 4, text: 'You' },
        { id: 5, text: 'Kick' },
        { id: 6, text: 'My name is Barry' },
        { id: 7, text: 'JavaScript is my favorite language.' },
        { id: 8, text: "Swift is my wife's favorite language." },
    ]
С помощью метода map вставляем эти данные в другой массив, возвращающий компаненту(ты)
Примеры с одним аргументов и одним элементом вывода
let dialogsElements = dialogsData.map(dialog => <Dialog name={dialog.name} id={dialog.id} />)
let messagesElements = messagesData.map(message => <Message text={message.text} />)
В примере с несколькими аргументами, нужны будут скобки () и слово return в теле функции. Больше можно узнать в гугле

А таким образом вставляется результат в JSX файле
{dialogsData}

Урок 26-29:
Перенос массивов данных с помощью props в index.js

Урок 30: обобщение теории

Урок 31:
Добавлен в Profile и Dialogs onClick() в button, ref в texterea, React.createRef и peremennaya.сurrent.calue
Это нужно было сделать для того, чтобы при нажатии на кнопку вызывалась функция, которую мы потом заменим на добавление введенных данных в базу
 и потом сделаем чтобы из базы создавался пост или отплавлялось сообщение.

Урок 32:
Добавлена функция addUser в state и передана через props в компаненту Dialogs, заменив на её alert()

Урок 33: Основы Flux-концепции
Добавление функции rerenderEntireTree() в render.js(файл создан чтобы не было функционального зацикливания. Не замыкались import и export)
Функция rerenderEntireTree(); перересовывает всё дерево UI (это не эффективно, но для обучения пойдет) при изменениях в данных в state